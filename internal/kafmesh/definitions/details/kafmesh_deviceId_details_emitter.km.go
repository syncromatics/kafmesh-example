// Code generated by kafmesh-gen. DO NOT EDIT.

package details

import (
	"context"

	"github.com/burdiyan/kafkautil"
	"github.com/lovoo/goka"
	"github.com/pkg/errors"

	"github.com/syncromatics/kafmesh/pkg/runner"

	deviceId "kafmesh-example/internal/kafmesh/definitions/models/kafmesh/deviceId"
)

type DeviceIdDetails_Emitter struct {
	emitter *runner.Emitter
}

type DeviceIdDetails_Emitter_Message struct {
	key string
	value *deviceId.Details
}

func New_DeviceIdDetails_Emitter_Message(key string, value *deviceId.Details) *DeviceIdDetails_Emitter_Message {
	return &DeviceIdDetails_Emitter_Message{
		key: key,
		value: value,
	}
}

func (m *DeviceIdDetails_Emitter_Message) Key() string {
	return m.key
}

func (m *DeviceIdDetails_Emitter_Message) Value() interface{} {
	return m.value
}

func New_DeviceIdDetails_Emitter(options runner.ServiceOptions) (*DeviceIdDetails_Emitter, error) {
	brokers := options.Brokers
	protoWrapper := options.ProtoWrapper

	codec, err := protoWrapper.Codec("kafmesh.deviceId.details", &deviceId.Details{})
	if err != nil {
		return nil, errors.Wrap(err, "failed to create codec")
	}

	emitter, err := goka.NewEmitter(brokers,
		goka.Stream("kafmesh.deviceId.details"),
		codec,
		goka.WithEmitterHasher(kafkautil.MurmurHasher))

	if err != nil {
		return nil, errors.Wrap(err, "failed creating emitter")
	}

	return &DeviceIdDetails_Emitter{
		emitter: runner.NewEmitter(emitter),
	}, nil
}

func (e *DeviceIdDetails_Emitter) Watch(ctx context.Context) func() error {
	return e.emitter.Watch(ctx)
}

func (e *DeviceIdDetails_Emitter) Emit(message *DeviceIdDetails_Emitter_Message) error {
	return e.emitter.Emit(message.Key(), message.Value())
}

func (e *DeviceIdDetails_Emitter) EmitBulk(ctx context.Context, messages []*DeviceIdDetails_Emitter_Message) error {
	b := []runner.EmitMessage{}
	for _, m := range messages {
		b = append(b, m)
	}
	return e.emitter.EmitBulk(ctx, b)
}
