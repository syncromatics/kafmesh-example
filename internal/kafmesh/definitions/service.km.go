// Code generated by kafmesh-gen. DO NOT EDIT.

package kafmesh

import (
	"time"

	"github.com/pkg/errors"
	"github.com/syncromatics/kafmesh/pkg/runner"

	"kafmesh-example/internal/kafmesh/definitions/details"
	"kafmesh-example/internal/kafmesh/definitions/heartbeats"
	"kafmesh-example/internal/kafmesh/definitions/synchronizers"
)

func Register_KafmeshDeviceIdEnrichedDetails_Processor(service *runner.Service, processor details.KafmeshDeviceIdEnrichedDetails_Processor) error {
	r, err := details.Register_KafmeshDeviceIdEnrichedDetails_Processor(service.Options(), processor)
	if err != nil {
		return errors.Wrap(err, "failed to register processor")
	}

	err = service.RegisterRunner(r)
	if err != nil {
		return errors.Wrap(err, "failed to register runner with service")
	}

	return nil
}

func Register_KafmeshDeviceIdEnrichedHeartbeat_Processor(service *runner.Service, processor heartbeats.KafmeshDeviceIdEnrichedHeartbeat_Processor) error {
	r, err := heartbeats.Register_KafmeshDeviceIdEnrichedHeartbeat_Processor(service.Options(), processor)
	if err != nil {
		return errors.Wrap(err, "failed to register processor")
	}

	err = service.RegisterRunner(r)
	if err != nil {
		return errors.Wrap(err, "failed to register runner with service")
	}

	return nil
}

func New_DeviceIdDetails_Emitter(service *runner.Service) (*details.DeviceIdDetails_Emitter, error) {
	e, err := details.New_DeviceIdDetails_Emitter(service.Options())
	if err != nil {
		return nil, err
	}

	err = service.RegisterRunner(e.Watch)
	if err != nil {
		return nil, errors.Wrap(err, "failed to register runner with service")
	}

	return e, nil
}

func New_DeviceIdHeartbeat_Emitter(service *runner.Service) (*heartbeats.DeviceIdHeartbeat_Emitter, error) {
	e, err := heartbeats.New_DeviceIdHeartbeat_Emitter(service.Options())
	if err != nil {
		return nil, err
	}

	err = service.RegisterRunner(e.Watch)
	if err != nil {
		return nil, errors.Wrap(err, "failed to register runner with service")
	}

	return e, nil
}

func New_DeviceIdEnrichedDetails_View(service *runner.Service) (*details.DeviceIdEnrichedDetails_View, error) {
	v, err := details.New_DeviceIdEnrichedDetails_View(service.Options())
	if err != nil {
		return nil, err
	}

	err = service.RegisterRunner(v.Watch)
	if err != nil {
		return nil, errors.Wrap(err, "failed to register runner with service")
	}

	return v, nil
}

func Register_EnrichedDetailWarehouseSink_Sink(service *runner.Service, sink details.EnrichedDetailWarehouseSink_Sink, interval time.Duration, maxBufferSize int) error {
	r, err := details.Register_EnrichedDetailWarehouseSink_Sink(service.Options(), sink, interval, maxBufferSize)
	if err != nil {
		return errors.Wrap(err, "failed to register sink")
	}

	err = service.RegisterRunner(r)
	if err != nil {
		return errors.Wrap(err, "failed to register runner with service")
	}

	return nil
}

func Register_EnrichedHeartbeatWarehouseSink_Sink(service *runner.Service, sink heartbeats.EnrichedHeartbeatWarehouseSink_Sink, interval time.Duration, maxBufferSize int) error {
	r, err := heartbeats.Register_EnrichedHeartbeatWarehouseSink_Sink(service.Options(), sink, interval, maxBufferSize)
	if err != nil {
		return errors.Wrap(err, "failed to register sink")
	}

	err = service.RegisterRunner(r)
	if err != nil {
		return errors.Wrap(err, "failed to register runner with service")
	}

	return nil
}

func Register_DeviceIdCustomer_Synchronizer(service *runner.Service, synchronizer synchronizers.DeviceIdCustomer_Synchronizer, updateInterval time.Duration) error {
	r, err := synchronizers.Register_DeviceIdCustomer_Synchronizer(service.Options(), synchronizer, updateInterval)
	if err != nil {
		return errors.Wrap(err, "failed to register sychronizer")
	}

	err = service.RegisterRunner(r)
	if err != nil {
		return errors.Wrap(err, "failed to register runner with service")
	}

	return nil
}
