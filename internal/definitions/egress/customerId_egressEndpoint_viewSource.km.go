// Code generated by kafmesh-gen. DO NOT EDIT.

package egress

import (
	"context"
	"os"
	"path/filepath"
	"time"
	"fmt"

	"github.com/burdiyan/kafkautil"
	"github.com/lovoo/goka"
	"github.com/lovoo/goka/storage"
	"github.com/pkg/errors"
	"github.com/syndtr/goleveldb/leveldb/opt"
	"golang.org/x/sync/errgroup"

	"github.com/syncromatics/kafmesh/pkg/runner"

	"kafmesh-example/internal/definitions/models/kafmesh/customerId"
)

type Egress_ViewSource_Context interface {
	context.Context
	Update(string, *customerId.EgressEndpoint) error
}

type Egress_ViewSource interface {
	Sync(Egress_ViewSource_Context) error
}

type contextWrap_Egress struct {
	context.Context
	job *runner.ProtoViewSourceJob
}

func (c *contextWrap_Egress) Update(key string, msg *customerId.EgressEndpoint) error {
	return c.job.Update(key, msg)
}

func Register_Egress_ViewSource(options runner.ServiceOptions, sychronizer Egress_ViewSource, updateInterval time.Duration, syncTimeout time.Duration) (func(context.Context) func() error, error) {
	brokers := options.Brokers
	protoWrapper := options.ProtoWrapper

	codec, err := protoWrapper.Codec("kafmesh.customerId.egressEndpoint", &customerId.EgressEndpoint{})
	if err != nil {
		return nil, errors.Wrap(err, "failed to create codec")
	}

	opts := &opt.Options{
		BlockCacheCapacity: opt.MiB * 1,
		WriteBuffer:        opt.MiB * 1,
	}

	path := filepath.Join("/tmp/storage", "viewSource", "kafmesh.customerId.egressEndpoint")

	err = os.MkdirAll(path, os.ModePerm)
	if err != nil {
		return nil, errors.Wrap(err, "failed to create view source db directory")
	}

	builder := storage.BuilderWithOptions(path, opts)

	view, err := goka.NewView(brokers,
		goka.Table("kafmesh.customerId.egressEndpoint"),
		codec,
		goka.WithViewStorageBuilder(builder),
		goka.WithViewHasher(kafkautil.MurmurHasher),
	)

	if err != nil {
		return nil, errors.Wrap(err, "failed creating sychronizer view")
	}

	e, err := goka.NewEmitter(brokers,
		goka.Stream("kafmesh.customerId.egressEndpoint"),
		codec,
		goka.WithEmitterHasher(kafkautil.MurmurHasher))

	if err != nil {
		return nil, errors.Wrap(err, "failed creating sychronizer emitter")
	}

	emitter := runner.NewEmitter(e)

	return func(ctx context.Context) func() error {
		return func() error {
			gctx, cancel := context.WithCancel(ctx)
			grp, gctx := errgroup.WithContext(ctx)
			defer cancel()

			timer := time.NewTimer(0)
			grp.Go(func() error {
				for {
					select {
					case <-gctx.Done():
						return nil
					case <-timer.C:
						newContext, cancel := context.WithTimeout(gctx, syncTimeout)
						c := runner.NewProtoViewSourceJob(newContext, view, emitter)
						cw := &contextWrap_Egress{newContext, c}
						err := sychronizer.Sync(cw)
						if err != nil {
							cancel()
							fmt.Printf("sync error '%v'", err)
							return err
						}
						err = c.Finish()
						if err != nil {
							cancel()
							fmt.Printf("sync finish error '%v'", err)
							return err
						}
						cancel()
						timer = time.NewTimer(updateInterval)
					}
				}
			})

			grp.Go(emitter.Watch(gctx))
			grp.Go(func() error {
				return view.Run(gctx)
			})

			select {
			case <- ctx.Done():
				return nil
			case <- gctx.Done():
				err := grp.Wait()
				return err
			}
		}
	}, nil
}
