// Code generated by kafmesh-gen. DO NOT EDIT.

package assignments

import (
	"context"
	"os"
	"path/filepath"
	"time"
	"fmt"

	"github.com/burdiyan/kafkautil"
	"github.com/lovoo/goka"
	"github.com/lovoo/goka/storage"
	"github.com/pkg/errors"
	"github.com/syndtr/goleveldb/leveldb/opt"
	"golang.org/x/sync/errgroup"

	"github.com/syncromatics/kafmesh/pkg/runner"

	customerId "kafmesh-example/internal/definitions/models/kafmesh/customerId"
)

type CustomerIdDetails_Synchronizer_Message struct {
	Key string
	Value *customerId.Details
}

type impl_CustomerIdDetails_Synchronizer_Message struct {
	msg *CustomerIdDetails_Synchronizer_Message
}

func (m *impl_CustomerIdDetails_Synchronizer_Message) Key() string {
	return m.msg.Key
}

func (m *impl_CustomerIdDetails_Synchronizer_Message) Value() interface{} {
	return m.msg.Value
}

type CustomerIdDetails_Synchronizer_Context interface {
	Keys() ([]string, error)
	Get(string) (*customerId.Details, error)
	Emit(*CustomerIdDetails_Synchronizer_Message) error
	EmitBulk(context.Context, []*CustomerIdDetails_Synchronizer_Message) error
	Delete(string) error
}

type CustomerIdDetails_Synchronizer_Context_impl struct {
	view *goka.View
	emitter *runner.Emitter
}

func (c *CustomerIdDetails_Synchronizer_Context_impl) Keys() ([]string, error) {
	it, err := c.view.Iterator()
	if err != nil {
		return nil, errors.Wrap(err, "failed to get iterator")
	}

	keys := []string{}
	for it.Next() {
		keys = append(keys, it.Key())
	}

	return keys, nil
}

func (c *CustomerIdDetails_Synchronizer_Context_impl) Get(key string) (*customerId.Details, error) {
	m, err := c.view.Get(key)
	if err != nil {
		return nil, errors.Wrap(err, "failed to get value from view")
	}

	if m == nil {
		return nil, nil
	}

	msg, ok := m.(*customerId.Details)
	if !ok {
		return nil, errors.Errorf("expecting message of type '*customerId.Details' got type '%t'", m)
	}

	return msg, nil
}

func (c *CustomerIdDetails_Synchronizer_Context_impl) Emit(message *CustomerIdDetails_Synchronizer_Message) error {
	return c.emitter.Emit(message.Key, message.Value)
}

func (c *CustomerIdDetails_Synchronizer_Context_impl) EmitBulk(ctx context.Context, messages []*CustomerIdDetails_Synchronizer_Message) error {
	b := []runner.EmitMessage{}
	for _, m := range messages {
		b = append(b, &impl_CustomerIdDetails_Synchronizer_Message{msg: m})
	}
	return c.emitter.EmitBulk(ctx, b)
}

func (c *CustomerIdDetails_Synchronizer_Context_impl) Delete(key string) error {
	return c.emitter.Emit(key, nil)
}

type CustomerIdDetails_Synchronizer interface {
	Sync(CustomerIdDetails_Synchronizer_Context) error
}

func Register_CustomerIdDetails_Synchronizer(options runner.ServiceOptions, sychronizer CustomerIdDetails_Synchronizer, updateInterval time.Duration) (func(context.Context) func() error, error) {
	brokers := options.Brokers
	protoWrapper := options.ProtoWrapper

	codec, err := protoWrapper.Codec("kafmesh.customerId.details", &customerId.Details{})
	if err != nil {
		return nil, errors.Wrap(err, "failed to create codec")
	}

	opts := &opt.Options{
		BlockCacheCapacity: opt.MiB * 1,
		WriteBuffer:        opt.MiB * 1,
	}

	path := filepath.Join("/tmp/storage", "synchronizer", "kafmesh.customerId.details")

	err = os.MkdirAll(path, os.ModePerm)
	if err != nil {
		return nil, errors.Wrap(err, "failed to create synchronizer db directory")
	}

	builder := storage.BuilderWithOptions(path, opts)

	view, err := goka.NewView(brokers,
		goka.Table("kafmesh.customerId.details"),
		codec,
		goka.WithViewStorageBuilder(builder),
		goka.WithViewHasher(kafkautil.MurmurHasher),
	)

	if err != nil {
		return nil, errors.Wrap(err, "failed creating sychronizer view")
	}

	e, err := goka.NewEmitter(brokers,
		goka.Stream("kafmesh.customerId.details"),
		codec,
		goka.WithEmitterHasher(kafkautil.MurmurHasher))

	if err != nil {
		return nil, errors.Wrap(err, "failed creating sychronizer emitter")
	}

	emitter := runner.NewEmitter(e)

	c := &CustomerIdDetails_Synchronizer_Context_impl{
		view:    view,
		emitter: emitter,
	}

	return func(ctx context.Context) func() error {
		return func() error {
			gctx, cancel := context.WithCancel(ctx)
			grp, gctx := errgroup.WithContext(ctx)
			defer cancel()

			timer := time.NewTimer(0)
			grp.Go(func() error {
				for {
					select {
					case <-gctx.Done():
						return nil
					case <-timer.C:
						err := sychronizer.Sync(c)
						if err != nil {
							fmt.Printf("sync error '%v'", err)
							return err
						}
						timer = time.NewTimer(updateInterval)
					}
				}
			})

			grp.Go(emitter.Watch(gctx))
			grp.Go(func() error {
				return view.Run(gctx)
			})

			select {
			case <- ctx.Done():
				return nil
			case <- gctx.Done():
				err := grp.Wait()
				return err
			}
		}
	}, nil
}
