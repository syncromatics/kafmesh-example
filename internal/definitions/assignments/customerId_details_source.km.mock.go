// Code generated by MockGen. DO NOT EDIT.
// Source: /home/jeff/source/kafmesh-example/internal/definitions/assignments/customerId_details_source.km.go

// Package assignments is a generated GoMock package.
package assignments

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCustomerIDDetails_Source is a mock of CustomerIDDetails_Source interface
type MockCustomerIDDetails_Source struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerIDDetails_SourceMockRecorder
}

// MockCustomerIDDetails_SourceMockRecorder is the mock recorder for MockCustomerIDDetails_Source
type MockCustomerIDDetails_SourceMockRecorder struct {
	mock *MockCustomerIDDetails_Source
}

// NewMockCustomerIDDetails_Source creates a new mock instance
func NewMockCustomerIDDetails_Source(ctrl *gomock.Controller) *MockCustomerIDDetails_Source {
	mock := &MockCustomerIDDetails_Source{ctrl: ctrl}
	mock.recorder = &MockCustomerIDDetails_SourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCustomerIDDetails_Source) EXPECT() *MockCustomerIDDetails_SourceMockRecorder {
	return m.recorder
}

// Emit mocks base method
func (m *MockCustomerIDDetails_Source) Emit(message CustomerIDDetails_Source_Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Emit", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Emit indicates an expected call of Emit
func (mr *MockCustomerIDDetails_SourceMockRecorder) Emit(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Emit", reflect.TypeOf((*MockCustomerIDDetails_Source)(nil).Emit), message)
}

// EmitBulk mocks base method
func (m *MockCustomerIDDetails_Source) EmitBulk(ctx context.Context, messages []CustomerIDDetails_Source_Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmitBulk", ctx, messages)
	ret0, _ := ret[0].(error)
	return ret0
}

// EmitBulk indicates an expected call of EmitBulk
func (mr *MockCustomerIDDetails_SourceMockRecorder) EmitBulk(ctx, messages interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitBulk", reflect.TypeOf((*MockCustomerIDDetails_Source)(nil).EmitBulk), ctx, messages)
}

// Delete mocks base method
func (m *MockCustomerIDDetails_Source) Delete(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockCustomerIDDetails_SourceMockRecorder) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCustomerIDDetails_Source)(nil).Delete), key)
}
