// Code generated by MockGen. DO NOT EDIT.
// Source: /home/jeff/source/syncromatics/kafmesh-example/internal/definitions/assignments/deviceId_customer_viewSource.km.go

// Package assignments is a generated GoMock package.
package assignments

import (
	gomock "github.com/golang/mock/gomock"
	deviceId "kafmesh-example/internal/definitions/models/kafmesh/deviceId"
	reflect "reflect"
	time "time"
)

// MockDeviceCustomer_ViewSource_Context is a mock of DeviceCustomer_ViewSource_Context interface
type MockDeviceCustomer_ViewSource_Context struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceCustomer_ViewSource_ContextMockRecorder
}

// MockDeviceCustomer_ViewSource_ContextMockRecorder is the mock recorder for MockDeviceCustomer_ViewSource_Context
type MockDeviceCustomer_ViewSource_ContextMockRecorder struct {
	mock *MockDeviceCustomer_ViewSource_Context
}

// NewMockDeviceCustomer_ViewSource_Context creates a new mock instance
func NewMockDeviceCustomer_ViewSource_Context(ctrl *gomock.Controller) *MockDeviceCustomer_ViewSource_Context {
	mock := &MockDeviceCustomer_ViewSource_Context{ctrl: ctrl}
	mock.recorder = &MockDeviceCustomer_ViewSource_ContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDeviceCustomer_ViewSource_Context) EXPECT() *MockDeviceCustomer_ViewSource_ContextMockRecorder {
	return m.recorder
}

// Deadline mocks base method
func (m *MockDeviceCustomer_ViewSource_Context) Deadline() (time.Time, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deadline")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Deadline indicates an expected call of Deadline
func (mr *MockDeviceCustomer_ViewSource_ContextMockRecorder) Deadline() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deadline", reflect.TypeOf((*MockDeviceCustomer_ViewSource_Context)(nil).Deadline))
}

// Done mocks base method
func (m *MockDeviceCustomer_ViewSource_Context) Done() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Done indicates an expected call of Done
func (mr *MockDeviceCustomer_ViewSource_ContextMockRecorder) Done() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockDeviceCustomer_ViewSource_Context)(nil).Done))
}

// Err mocks base method
func (m *MockDeviceCustomer_ViewSource_Context) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err
func (mr *MockDeviceCustomer_ViewSource_ContextMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockDeviceCustomer_ViewSource_Context)(nil).Err))
}

// Value mocks base method
func (m *MockDeviceCustomer_ViewSource_Context) Value(key interface{}) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value", key)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Value indicates an expected call of Value
func (mr *MockDeviceCustomer_ViewSource_ContextMockRecorder) Value(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockDeviceCustomer_ViewSource_Context)(nil).Value), key)
}

// Update mocks base method
func (m *MockDeviceCustomer_ViewSource_Context) Update(arg0 string, arg1 *deviceId.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockDeviceCustomer_ViewSource_ContextMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDeviceCustomer_ViewSource_Context)(nil).Update), arg0, arg1)
}

// MockDeviceCustomer_ViewSource is a mock of DeviceCustomer_ViewSource interface
type MockDeviceCustomer_ViewSource struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceCustomer_ViewSourceMockRecorder
}

// MockDeviceCustomer_ViewSourceMockRecorder is the mock recorder for MockDeviceCustomer_ViewSource
type MockDeviceCustomer_ViewSourceMockRecorder struct {
	mock *MockDeviceCustomer_ViewSource
}

// NewMockDeviceCustomer_ViewSource creates a new mock instance
func NewMockDeviceCustomer_ViewSource(ctrl *gomock.Controller) *MockDeviceCustomer_ViewSource {
	mock := &MockDeviceCustomer_ViewSource{ctrl: ctrl}
	mock.recorder = &MockDeviceCustomer_ViewSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDeviceCustomer_ViewSource) EXPECT() *MockDeviceCustomer_ViewSourceMockRecorder {
	return m.recorder
}

// Sync mocks base method
func (m *MockDeviceCustomer_ViewSource) Sync(arg0 DeviceCustomer_ViewSource_Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync
func (mr *MockDeviceCustomer_ViewSourceMockRecorder) Sync(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockDeviceCustomer_ViewSource)(nil).Sync), arg0)
}
