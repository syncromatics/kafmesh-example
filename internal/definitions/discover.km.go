// Code generated by kafmesh-gen. DO NOT EDIT.

package definitions

import (
	"github.com/syncromatics/kafmesh/pkg/runner"
)


func discover_Details_Enricher_Processor(service *runner.Service) error {
	processor := runner.ProcessorDiscovery{
		ServiceDiscovery : runner.ServiceDiscovery {
			Name: "kafmesh",
			Description: "Kafmesh service is an example service to test kafmesh.",
		},
		ComponentDiscovery: runner.ComponentDiscovery{
			Name: "details",
			Description: "The details component handles the flow for device details.",
		},
		Name: "enricher",
		Description: "Provides enriched device details with customer information.",
		GroupName: "kafmesh.details.enricher",
		Inputs: []runner.InputDiscovery{
			{
				TopicDiscovery: runner.TopicDiscovery{
					Message: "kafmesh.deviceId.details",
					Topic: "kafmesh.deviceId.details",
					Type: 0,
				},
			},
			{
				TopicDiscovery: runner.TopicDiscovery{
					Message: "kafmesh.deviceId.customer",
					Topic: "kafmesh.deviceId.customer",
					Type: 0,
				},
			},
		},
		Joins: []runner.JoinDiscovery{
		},
		Lookups: []runner.LookupDiscovery{
			{
				TopicDiscovery: runner.TopicDiscovery{
					Message: "kafmesh.customerId.details",
					Topic: "kafmesh.customerId.details",
					Type: 0,
				},
			},
		},
		Outputs: []runner.OutputDiscovery{
			runner.OutputDiscovery{
				TopicDiscovery: runner.TopicDiscovery{
					Message: "kafmesh.deviceId.enrichedDetails",
					Topic: "kafmesh.deviceId.enrichedDetails",
					Type: 0,
				},
			},
		},
		Persistence: &runner.PersistentDiscovery{
			TopicDiscovery: runner.TopicDiscovery{
				Message: "kafmesh.deviceId.enrichedDetailsState",
				Topic: "kafmesh.details.enricher-table",
				Type: 0,
			},
		},
	}

	return service.RegisterProcessor(processor)
}
func discover_Heartbeats_HeartbeatEnricher_Processor(service *runner.Service) error {
	processor := runner.ProcessorDiscovery{
		ServiceDiscovery : runner.ServiceDiscovery {
			Name: "kafmesh",
			Description: "Kafmesh service is an example service to test kafmesh.",
		},
		ComponentDiscovery: runner.ComponentDiscovery{
			Name: "heartbeats",
			Description: "The heartbeats component handles the flow for device heartbeats.",
		},
		Name: "heartbeat enricher",
		Description: "Provides enriched device heartbeats with customer information.",
		GroupName: "deviceId.enrichedHeartbeat",
		Inputs: []runner.InputDiscovery{
			{
				TopicDiscovery: runner.TopicDiscovery{
					Message: "kafmesh.deviceId.heartbeat",
					Topic: "kafmesh.deviceId.heartbeat",
					Type: 0,
				},
			},
		},
		Joins: []runner.JoinDiscovery{
			{
				TopicDiscovery: runner.TopicDiscovery{
					Message: "kafmesh.deviceId.customer",
					Topic: "kafmesh.deviceId.customer",
					Type: 0,
				},
			},
		},
		Lookups: []runner.LookupDiscovery{
			{
				TopicDiscovery: runner.TopicDiscovery{
					Message: "kafmesh.customerId.details",
					Topic: "kafmesh.customerId.details",
					Type: 0,
				},
			},
		},
		Outputs: []runner.OutputDiscovery{
			runner.OutputDiscovery{
				TopicDiscovery: runner.TopicDiscovery{
					Message: "kafmesh.deviceId.enrichedHeartbeat",
					Topic: "kafmesh.deviceId.enrichedHeartbeat",
					Type: 0,
				},
			},
		},
	}

	return service.RegisterProcessor(processor)
}


func discover_Assignments_DeviceIDCustomer_Source(service *runner.Service) error {
	source := runner.SourceDiscovery{
		ServiceDiscovery : runner.ServiceDiscovery {
			Name: "kafmesh",
			Description: "Kafmesh service is an example service to test kafmesh.",
		},
		ComponentDiscovery: runner.ComponentDiscovery{
			Name: "assignments",
			Description: "The assignments component keeps the device to customer assignments up to date.",
		},
		TopicDiscovery: runner.TopicDiscovery{
			Message: "kafmesh.deviceId.customer",
			Topic: "kafmesh.deviceId.customer",
			Type: 0,
		},
	}

	return service.RegisterSource(source)
}
func discover_Assignments_CustomerIDDetails_Source(service *runner.Service) error {
	source := runner.SourceDiscovery{
		ServiceDiscovery : runner.ServiceDiscovery {
			Name: "kafmesh",
			Description: "Kafmesh service is an example service to test kafmesh.",
		},
		ComponentDiscovery: runner.ComponentDiscovery{
			Name: "assignments",
			Description: "The assignments component keeps the device to customer assignments up to date.",
		},
		TopicDiscovery: runner.TopicDiscovery{
			Message: "kafmesh.customerId.details",
			Topic: "kafmesh.customerId.details",
			Type: 0,
		},
	}

	return service.RegisterSource(source)
}
func discover_Details_DeviceIDDetails_Source(service *runner.Service) error {
	source := runner.SourceDiscovery{
		ServiceDiscovery : runner.ServiceDiscovery {
			Name: "kafmesh",
			Description: "Kafmesh service is an example service to test kafmesh.",
		},
		ComponentDiscovery: runner.ComponentDiscovery{
			Name: "details",
			Description: "The details component handles the flow for device details.",
		},
		TopicDiscovery: runner.TopicDiscovery{
			Message: "kafmesh.deviceId.details",
			Topic: "kafmesh.deviceId.details",
			Type: 0,
		},
	}

	return service.RegisterSource(source)
}
func discover_Heartbeats_DeviceIDHeartbeat_Source(service *runner.Service) error {
	source := runner.SourceDiscovery{
		ServiceDiscovery : runner.ServiceDiscovery {
			Name: "kafmesh",
			Description: "Kafmesh service is an example service to test kafmesh.",
		},
		ComponentDiscovery: runner.ComponentDiscovery{
			Name: "heartbeats",
			Description: "The heartbeats component handles the flow for device heartbeats.",
		},
		TopicDiscovery: runner.TopicDiscovery{
			Message: "kafmesh.deviceId.heartbeat",
			Topic: "kafmesh.deviceId.heartbeat",
			Type: 0,
		},
	}

	return service.RegisterSource(source)
}


func discover_Details_DeviceIDEnrichedDetails_Sink(service *runner.Service) error {
	sink := runner.SinkDiscovery{
		ServiceDiscovery : runner.ServiceDiscovery {
			Name: "kafmesh",
			Description: "Kafmesh service is an example service to test kafmesh.",
		},
		ComponentDiscovery: runner.ComponentDiscovery{
			Name: "details",
			Description: "The details component handles the flow for device details.",
		},
		TopicDiscovery: runner.TopicDiscovery{
			Message: "kafmesh.deviceId.enrichedDetails",
			Topic: "kafmesh.deviceId.enrichedDetails",
			Type: 0,
		},
		Name: "Enriched Detail Warehouse Sink",
		Description: "Sinks enriched device details to the warehouse database.",
	}

	return service.RegisterSink(sink)
}
func discover_Heartbeats_DeviceIDEnrichedHeartbeat_Sink(service *runner.Service) error {
	sink := runner.SinkDiscovery{
		ServiceDiscovery : runner.ServiceDiscovery {
			Name: "kafmesh",
			Description: "Kafmesh service is an example service to test kafmesh.",
		},
		ComponentDiscovery: runner.ComponentDiscovery{
			Name: "heartbeats",
			Description: "The heartbeats component handles the flow for device heartbeats.",
		},
		TopicDiscovery: runner.TopicDiscovery{
			Message: "kafmesh.deviceId.enrichedHeartbeat",
			Topic: "kafmesh.deviceId.enrichedHeartbeat",
			Type: 0,
		},
		Name: "Enriched Heartbeat Warehouse Sink",
		Description: "Sinks enriched device heartbeats to the warehouse database.",
	}

	return service.RegisterSink(sink)
}


func discover_Assignments_DeviceIDCustomer_View(service *runner.Service) error {
	view := runner.ViewDiscovery{
		ServiceDiscovery : runner.ServiceDiscovery {
			Name: "kafmesh",
			Description: "Kafmesh service is an example service to test kafmesh.",
		},
		ComponentDiscovery: runner.ComponentDiscovery{
			Name: "assignments",
			Description: "The assignments component keeps the device to customer assignments up to date.",
		},
		TopicDiscovery: runner.TopicDiscovery{
			Message: "kafmesh.deviceId.customer",
			Topic: "kafmesh.deviceId.customer",
			Type: 0,
		},
	}

	return service.RegisterView(view)
}
func discover_Assignments_CustomerIDDetails_View(service *runner.Service) error {
	view := runner.ViewDiscovery{
		ServiceDiscovery : runner.ServiceDiscovery {
			Name: "kafmesh",
			Description: "Kafmesh service is an example service to test kafmesh.",
		},
		ComponentDiscovery: runner.ComponentDiscovery{
			Name: "assignments",
			Description: "The assignments component keeps the device to customer assignments up to date.",
		},
		TopicDiscovery: runner.TopicDiscovery{
			Message: "kafmesh.customerId.details",
			Topic: "kafmesh.customerId.details",
			Type: 0,
		},
	}

	return service.RegisterView(view)
}
func discover_Details_DeviceIDEnrichedDetails_View(service *runner.Service) error {
	view := runner.ViewDiscovery{
		ServiceDiscovery : runner.ServiceDiscovery {
			Name: "kafmesh",
			Description: "Kafmesh service is an example service to test kafmesh.",
		},
		ComponentDiscovery: runner.ComponentDiscovery{
			Name: "details",
			Description: "The details component handles the flow for device details.",
		},
		TopicDiscovery: runner.TopicDiscovery{
			Message: "kafmesh.deviceId.enrichedDetails",
			Topic: "kafmesh.deviceId.enrichedDetails",
			Type: 0,
		},
	}

	return service.RegisterView(view)
}




