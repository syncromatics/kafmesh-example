// Code generated by MockGen. DO NOT EDIT.
// Source: /home/jeff/source/syncromatics/kafmesh-example/internal/definitions/heartbeats/heartbeat enricher_processor.km.go

// Package heartbeats is a generated GoMock package.
package heartbeats

import (
	gomock "github.com/golang/mock/gomock"
	customerId "kafmesh-example/internal/definitions/models/kafmesh/customerId"
	deviceId "kafmesh-example/internal/definitions/models/kafmesh/deviceId"
	reflect "reflect"
	time "time"
)

// MockHeartbeatEnricher_ProcessorContext is a mock of HeartbeatEnricher_ProcessorContext interface
type MockHeartbeatEnricher_ProcessorContext struct {
	ctrl     *gomock.Controller
	recorder *MockHeartbeatEnricher_ProcessorContextMockRecorder
}

// MockHeartbeatEnricher_ProcessorContextMockRecorder is the mock recorder for MockHeartbeatEnricher_ProcessorContext
type MockHeartbeatEnricher_ProcessorContextMockRecorder struct {
	mock *MockHeartbeatEnricher_ProcessorContext
}

// NewMockHeartbeatEnricher_ProcessorContext creates a new mock instance
func NewMockHeartbeatEnricher_ProcessorContext(ctrl *gomock.Controller) *MockHeartbeatEnricher_ProcessorContext {
	mock := &MockHeartbeatEnricher_ProcessorContext{ctrl: ctrl}
	mock.recorder = &MockHeartbeatEnricher_ProcessorContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHeartbeatEnricher_ProcessorContext) EXPECT() *MockHeartbeatEnricher_ProcessorContextMockRecorder {
	return m.recorder
}

// Key mocks base method
func (m *MockHeartbeatEnricher_ProcessorContext) Key() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key")
	ret0, _ := ret[0].(string)
	return ret0
}

// Key indicates an expected call of Key
func (mr *MockHeartbeatEnricher_ProcessorContextMockRecorder) Key() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockHeartbeatEnricher_ProcessorContext)(nil).Key))
}

// Timestamp mocks base method
func (m *MockHeartbeatEnricher_ProcessorContext) Timestamp() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Timestamp")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Timestamp indicates an expected call of Timestamp
func (mr *MockHeartbeatEnricher_ProcessorContextMockRecorder) Timestamp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timestamp", reflect.TypeOf((*MockHeartbeatEnricher_ProcessorContext)(nil).Timestamp))
}

// Lookup_CustomerIDDetails mocks base method
func (m *MockHeartbeatEnricher_ProcessorContext) Lookup_CustomerIDDetails(key string) *customerId.Details {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lookup_CustomerIDDetails", key)
	ret0, _ := ret[0].(*customerId.Details)
	return ret0
}

// Lookup_CustomerIDDetails indicates an expected call of Lookup_CustomerIDDetails
func (mr *MockHeartbeatEnricher_ProcessorContextMockRecorder) Lookup_CustomerIDDetails(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lookup_CustomerIDDetails", reflect.TypeOf((*MockHeartbeatEnricher_ProcessorContext)(nil).Lookup_CustomerIDDetails), key)
}

// Join_DeviceIDCustomer mocks base method
func (m *MockHeartbeatEnricher_ProcessorContext) Join_DeviceIDCustomer() *deviceId.Customer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Join_DeviceIDCustomer")
	ret0, _ := ret[0].(*deviceId.Customer)
	return ret0
}

// Join_DeviceIDCustomer indicates an expected call of Join_DeviceIDCustomer
func (mr *MockHeartbeatEnricher_ProcessorContextMockRecorder) Join_DeviceIDCustomer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join_DeviceIDCustomer", reflect.TypeOf((*MockHeartbeatEnricher_ProcessorContext)(nil).Join_DeviceIDCustomer))
}

// Output_DeviceIDEnrichedHeartbeat mocks base method
func (m *MockHeartbeatEnricher_ProcessorContext) Output_DeviceIDEnrichedHeartbeat(key string, message *deviceId.EnrichedHeartbeat) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Output_DeviceIDEnrichedHeartbeat", key, message)
}

// Output_DeviceIDEnrichedHeartbeat indicates an expected call of Output_DeviceIDEnrichedHeartbeat
func (mr *MockHeartbeatEnricher_ProcessorContextMockRecorder) Output_DeviceIDEnrichedHeartbeat(key, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Output_DeviceIDEnrichedHeartbeat", reflect.TypeOf((*MockHeartbeatEnricher_ProcessorContext)(nil).Output_DeviceIDEnrichedHeartbeat), key, message)
}

// MockHeartbeatEnricher_Processor is a mock of HeartbeatEnricher_Processor interface
type MockHeartbeatEnricher_Processor struct {
	ctrl     *gomock.Controller
	recorder *MockHeartbeatEnricher_ProcessorMockRecorder
}

// MockHeartbeatEnricher_ProcessorMockRecorder is the mock recorder for MockHeartbeatEnricher_Processor
type MockHeartbeatEnricher_ProcessorMockRecorder struct {
	mock *MockHeartbeatEnricher_Processor
}

// NewMockHeartbeatEnricher_Processor creates a new mock instance
func NewMockHeartbeatEnricher_Processor(ctrl *gomock.Controller) *MockHeartbeatEnricher_Processor {
	mock := &MockHeartbeatEnricher_Processor{ctrl: ctrl}
	mock.recorder = &MockHeartbeatEnricher_ProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHeartbeatEnricher_Processor) EXPECT() *MockHeartbeatEnricher_ProcessorMockRecorder {
	return m.recorder
}

// HandleDeviceIDHeartbeat mocks base method
func (m *MockHeartbeatEnricher_Processor) HandleDeviceIDHeartbeat(ctx HeartbeatEnricher_ProcessorContext, message *deviceId.Heartbeat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleDeviceIDHeartbeat", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleDeviceIDHeartbeat indicates an expected call of HandleDeviceIDHeartbeat
func (mr *MockHeartbeatEnricher_ProcessorMockRecorder) HandleDeviceIDHeartbeat(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleDeviceIDHeartbeat", reflect.TypeOf((*MockHeartbeatEnricher_Processor)(nil).HandleDeviceIDHeartbeat), ctx, message)
}
