// Code generated by kafmesh-gen. DO NOT EDIT.

package heartbeats

import (
	"context"
	"time"

	"github.com/lovoo/goka"
	"github.com/pkg/errors"

	"github.com/syncromatics/kafmesh/pkg/runner"

	deviceId "kafmesh-example/internal/definitions/models/kafmesh/deviceId"
)

type EnrichedHeartbeatWarehouseSink_Sink interface {
	Flush() error
	Collect(ctx runner.MessageContext, key string, msg *deviceId.EnrichedHeartbeat) error
}

type impl_EnrichedHeartbeatWarehouseSink_Sink struct {
	sink EnrichedHeartbeatWarehouseSink_Sink
	codec goka.Codec
	group string
	topic string
	maxBufferSize int
	interval time.Duration
}

func (s *impl_EnrichedHeartbeatWarehouseSink_Sink) Codec() goka.Codec {
	return s.codec
}

func (s *impl_EnrichedHeartbeatWarehouseSink_Sink) Group() string {
	return s.group
}

func (s *impl_EnrichedHeartbeatWarehouseSink_Sink) Topic() string {
	return s.topic
}

func (s *impl_EnrichedHeartbeatWarehouseSink_Sink) MaxBufferSize() int {
	return s.maxBufferSize
}

func (s *impl_EnrichedHeartbeatWarehouseSink_Sink) Interval() time.Duration {
	return s.interval
}

func (s *impl_EnrichedHeartbeatWarehouseSink_Sink) Flush() error {
	return s.sink.Flush()
}

func (s *impl_EnrichedHeartbeatWarehouseSink_Sink) Collect(ctx runner.MessageContext, key string, msg interface{}) error {
	m, ok := msg.(*deviceId.EnrichedHeartbeat)
	if !ok {
		return errors.Errorf("expecting message of type '*deviceId.EnrichedHeartbeat' got type '%t'", msg)
	}

	return s.sink.Collect(ctx, key, m)
}

func Register_EnrichedHeartbeatWarehouseSink_Sink(options runner.ServiceOptions, sink EnrichedHeartbeatWarehouseSink_Sink, interval time.Duration, maxBufferSize int) (func(ctx context.Context) func() error, error) {
	brokers := options.Brokers
	protoWrapper := options.ProtoWrapper

	codec, err := protoWrapper.Codec("kafmesh.deviceId.enrichedHeartbeat", &deviceId.EnrichedHeartbeat{})
	if err != nil {
		return nil, errors.Wrap(err, "failed to create codec")
	}

	d := &impl_EnrichedHeartbeatWarehouseSink_Sink{
		sink: sink,
		codec: codec,
		group: "enrichedheartbeatwarehousesink-sink",
		topic: "kafmesh.deviceId.enrichedHeartbeat",
		maxBufferSize: maxBufferSize,
		interval: interval,
	}

	s := runner.NewSinkRunner(d, brokers)

	return func(ctx context.Context) func() error {
		return s.Run(ctx)
	}, nil
}
