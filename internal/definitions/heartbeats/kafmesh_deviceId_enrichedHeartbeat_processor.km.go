// Code generated by kafmesh-gen. DO NOT EDIT.

package heartbeats

import (
	"context"
	"os"
	"path/filepath"

	"github.com/burdiyan/kafkautil"
	"github.com/lovoo/goka"
	"github.com/lovoo/goka/kafka"
	"github.com/lovoo/goka/storage"
	"github.com/pkg/errors"
	"github.com/syndtr/goleveldb/leveldb/opt"

	"github.com/syncromatics/kafmesh/pkg/runner"

	m0 "kafmesh-example/internal/definitions/models/kafmesh/deviceId"
	m1 "kafmesh-example/internal/definitions/models/kafmesh/customerId"
)

type KafmeshDeviceIdEnrichedHeartbeat_ProcessorContext interface {
	Key() string
	Lookup_CustomerIdDetails(key string) *m1.Details
	Join_DeviceIdCustomer() *m0.Customer
	Output_DeviceIdEnrichedHeartbeat(key string, message *m0.EnrichedHeartbeat)
}

type KafmeshDeviceIdEnrichedHeartbeat_Processor interface {
	HandleKafmeshDeviceIDHeartbeat(ctx KafmeshDeviceIdEnrichedHeartbeat_ProcessorContext, message *m0.Heartbeat) error
}

type KafmeshDeviceIdEnrichedHeartbeat_ProcessorContext_Impl struct {
	ctx goka.Context
}

func new_KafmeshDeviceIdEnrichedHeartbeat_ProcessorContext_Impl(ctx goka.Context) *KafmeshDeviceIdEnrichedHeartbeat_ProcessorContext_Impl {
	return &KafmeshDeviceIdEnrichedHeartbeat_ProcessorContext_Impl{ctx}
}

func (c *KafmeshDeviceIdEnrichedHeartbeat_ProcessorContext_Impl) Key() string {
	return c.ctx.Key()
}

func (c *KafmeshDeviceIdEnrichedHeartbeat_ProcessorContext_Impl) Lookup_CustomerIdDetails(key string) *m1.Details {
	v := c.ctx.Lookup("kafmesh.customerId.details", key)
	if v == nil {
		return nil
	}
	return v.(*m1.Details)
}

func (c *KafmeshDeviceIdEnrichedHeartbeat_ProcessorContext_Impl) Join_DeviceIdCustomer() *m0.Customer {
	v := c.ctx.Join("kafmesh.deviceId.customer")
	if v == nil {
		return nil
	}
	return v.(*m0.Customer)
}

func (c *KafmeshDeviceIdEnrichedHeartbeat_ProcessorContext_Impl) Output_DeviceIdEnrichedHeartbeat(key string, message *m0.EnrichedHeartbeat) {
	c.ctx.Emit("kafmesh.deviceId.enrichedHeartbeat", key, message)
}

func Register_KafmeshDeviceIdEnrichedHeartbeat_Processor(options runner.ServiceOptions, service KafmeshDeviceIdEnrichedHeartbeat_Processor) (func(context.Context) func() error, error) {
	brokers := options.Brokers
	protoWrapper := options.ProtoWrapper

	config := kafka.NewConfig()
	config.Consumer.Offsets.Initial = kafka.OffsetOldest

	opts := &opt.Options{
		BlockCacheCapacity: opt.MiB * 1,
		WriteBuffer:        opt.MiB * 1,
	}

	path := filepath.Join("/tmp/storage", "processor", "kafmesh.deviceId.enrichedHeartbeat")

	err := os.MkdirAll(path, os.ModePerm)
	if err != nil {
		return nil, errors.Wrap(err, "failed to create processor db directory")
	}

	builder := storage.BuilderWithOptions(path, opts)


	c0, err := protoWrapper.Codec("kafmesh.deviceId.heartbeat", &m0.Heartbeat{})
	if err != nil {
		return nil, errors.Wrap(err, "failed to create codec")
	}

	c1, err := protoWrapper.Codec("kafmesh.customerId.details", &m1.Details{})
	if err != nil {
		return nil, errors.Wrap(err, "failed to create codec")
	}

	c2, err := protoWrapper.Codec("kafmesh.deviceId.customer", &m0.Customer{})
	if err != nil {
		return nil, errors.Wrap(err, "failed to create codec")
	}

	c3, err := protoWrapper.Codec("kafmesh.deviceId.enrichedHeartbeat", &m0.EnrichedHeartbeat{})
	if err != nil {
		return nil, errors.Wrap(err, "failed to create codec")
	}

	edges := []goka.Edge{
		goka.Input(goka.Stream("kafmesh.deviceId.heartbeat"), c0, func(ctx goka.Context, m interface{}) {
			msg := m.(*m0.Heartbeat)
			w := new_KafmeshDeviceIdEnrichedHeartbeat_ProcessorContext_Impl(ctx)
			err := service.HandleKafmeshDeviceIDHeartbeat(w, msg)
			if err != nil {
				ctx.Fail(err)
			}
		}),
		goka.Lookup(goka.Table("kafmesh.customerId.details"), c1),
		goka.Join(goka.Table("kafmesh.deviceId.customer"), c2),
		goka.Output(goka.Stream("kafmesh.deviceId.enrichedHeartbeat"), c3),
	}
	group := goka.DefineGroup(goka.Group("kafmesh.deviceId.enrichedHeartbeat"), edges...)

	processor, err := goka.NewProcessor(brokers,
		group,
		goka.WithConsumerBuilder(kafka.ConsumerBuilderWithConfig(config)),
		goka.WithStorageBuilder(builder),
		goka.WithHasher(kafkautil.MurmurHasher))
	if err != nil {
		return nil, errors.Wrap(err, "failed to create goka processor")
	}

	return func(ctx context.Context) func() error {
		return func() error {
			err := processor.Run(ctx)
			if err != nil {
				return errors.Wrap(err, "failed to run goka processor")
			}

			return nil
		}
	}, nil
}
