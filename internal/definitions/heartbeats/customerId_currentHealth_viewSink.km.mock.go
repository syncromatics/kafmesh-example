// Code generated by MockGen. DO NOT EDIT.
// Source: /home/jeff/source/syncromatics/kafmesh-example/internal/definitions/heartbeats/customerId_currentHealth_viewSink.km.go

// Package heartbeats is a generated GoMock package.
package heartbeats

import (
	gomock "github.com/golang/mock/gomock"
	customerId "kafmesh-example/internal/definitions/models/kafmesh/customerId"
	reflect "reflect"
	time "time"
)

// MockCurrentHealth_ViewSink_Context is a mock of CurrentHealth_ViewSink_Context interface
type MockCurrentHealth_ViewSink_Context struct {
	ctrl     *gomock.Controller
	recorder *MockCurrentHealth_ViewSink_ContextMockRecorder
}

// MockCurrentHealth_ViewSink_ContextMockRecorder is the mock recorder for MockCurrentHealth_ViewSink_Context
type MockCurrentHealth_ViewSink_ContextMockRecorder struct {
	mock *MockCurrentHealth_ViewSink_Context
}

// NewMockCurrentHealth_ViewSink_Context creates a new mock instance
func NewMockCurrentHealth_ViewSink_Context(ctrl *gomock.Controller) *MockCurrentHealth_ViewSink_Context {
	mock := &MockCurrentHealth_ViewSink_Context{ctrl: ctrl}
	mock.recorder = &MockCurrentHealth_ViewSink_ContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCurrentHealth_ViewSink_Context) EXPECT() *MockCurrentHealth_ViewSink_ContextMockRecorder {
	return m.recorder
}

// Deadline mocks base method
func (m *MockCurrentHealth_ViewSink_Context) Deadline() (time.Time, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deadline")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Deadline indicates an expected call of Deadline
func (mr *MockCurrentHealth_ViewSink_ContextMockRecorder) Deadline() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deadline", reflect.TypeOf((*MockCurrentHealth_ViewSink_Context)(nil).Deadline))
}

// Done mocks base method
func (m *MockCurrentHealth_ViewSink_Context) Done() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Done indicates an expected call of Done
func (mr *MockCurrentHealth_ViewSink_ContextMockRecorder) Done() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockCurrentHealth_ViewSink_Context)(nil).Done))
}

// Err mocks base method
func (m *MockCurrentHealth_ViewSink_Context) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err
func (mr *MockCurrentHealth_ViewSink_ContextMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockCurrentHealth_ViewSink_Context)(nil).Err))
}

// Value mocks base method
func (m *MockCurrentHealth_ViewSink_Context) Value(key interface{}) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value", key)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Value indicates an expected call of Value
func (mr *MockCurrentHealth_ViewSink_ContextMockRecorder) Value(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockCurrentHealth_ViewSink_Context)(nil).Value), key)
}

// Keys mocks base method
func (m *MockCurrentHealth_ViewSink_Context) Keys() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Keys indicates an expected call of Keys
func (mr *MockCurrentHealth_ViewSink_ContextMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockCurrentHealth_ViewSink_Context)(nil).Keys))
}

// Get mocks base method
func (m *MockCurrentHealth_ViewSink_Context) Get(arg0 string) (*customerId.CurrentHealth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*customerId.CurrentHealth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockCurrentHealth_ViewSink_ContextMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCurrentHealth_ViewSink_Context)(nil).Get), arg0)
}

// MockCurrentHealth_ViewSink is a mock of CurrentHealth_ViewSink interface
type MockCurrentHealth_ViewSink struct {
	ctrl     *gomock.Controller
	recorder *MockCurrentHealth_ViewSinkMockRecorder
}

// MockCurrentHealth_ViewSinkMockRecorder is the mock recorder for MockCurrentHealth_ViewSink
type MockCurrentHealth_ViewSinkMockRecorder struct {
	mock *MockCurrentHealth_ViewSink
}

// NewMockCurrentHealth_ViewSink creates a new mock instance
func NewMockCurrentHealth_ViewSink(ctrl *gomock.Controller) *MockCurrentHealth_ViewSink {
	mock := &MockCurrentHealth_ViewSink{ctrl: ctrl}
	mock.recorder = &MockCurrentHealth_ViewSinkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCurrentHealth_ViewSink) EXPECT() *MockCurrentHealth_ViewSinkMockRecorder {
	return m.recorder
}

// Sync mocks base method
func (m *MockCurrentHealth_ViewSink) Sync(arg0 CurrentHealth_ViewSink_Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync
func (mr *MockCurrentHealth_ViewSinkMockRecorder) Sync(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockCurrentHealth_ViewSink)(nil).Sync), arg0)
}
