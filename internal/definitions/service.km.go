// Code generated by kafmesh-gen. DO NOT EDIT.

package definitions

import (
	"time"

	"github.com/pkg/errors"
	"github.com/syncromatics/kafmesh/pkg/runner"

	"kafmesh-example/internal/definitions/assignments"
	"kafmesh-example/internal/definitions/details"
	"kafmesh-example/internal/definitions/heartbeats"
)

func Register_Details_Enricher_Processor(service *runner.Service, processor details.Enricher_Processor) error {
	r, err := details.Register_Enricher_Processor(service, processor)
	if err != nil {
		return errors.Wrap(err, "failed to register processor")
	}

	err = service.RegisterRunner(r)
	if err != nil {
		return errors.Wrap(err, "failed to register runner with service")
	}

	err = discover_Details_Enricher_Processor(service)
	if err != nil {
		return errors.Wrap(err, "failed to register with discovery")
	}

	return nil
}

func Register_Heartbeats_Enricher_Processor(service *runner.Service, processor heartbeats.Enricher_Processor) error {
	r, err := heartbeats.Register_Enricher_Processor(service, processor)
	if err != nil {
		return errors.Wrap(err, "failed to register processor")
	}

	err = service.RegisterRunner(r)
	if err != nil {
		return errors.Wrap(err, "failed to register runner with service")
	}

	err = discover_Heartbeats_Enricher_Processor(service)
	if err != nil {
		return errors.Wrap(err, "failed to register with discovery")
	}

	return nil
}

func New_Assignments_KafmeshDeviceIDCustomer_View(service *runner.Service) (assignments.KafmeshDeviceIDCustomer_View, error) {
	v, err := assignments.New_KafmeshDeviceIDCustomer_View(service.Options())
	if err != nil {
		return nil, err
	}

	err = service.RegisterRunner(v.Watch)
	if err != nil {
		return nil, errors.Wrap(err, "failed to register runner with service")
	}

	err = discover_Assignments_KafmeshDeviceIDCustomer_View(service)
	if err != nil {
		return nil, errors.Wrap(err, "failed to register with discovery")
	}

	return v, nil
}

func New_Assignments_KafmeshCustomerIDDetails_View(service *runner.Service) (assignments.KafmeshCustomerIDDetails_View, error) {
	v, err := assignments.New_KafmeshCustomerIDDetails_View(service.Options())
	if err != nil {
		return nil, err
	}

	err = service.RegisterRunner(v.Watch)
	if err != nil {
		return nil, errors.Wrap(err, "failed to register runner with service")
	}

	err = discover_Assignments_KafmeshCustomerIDDetails_View(service)
	if err != nil {
		return nil, errors.Wrap(err, "failed to register with discovery")
	}

	return v, nil
}

func New_Details_KafmeshDeviceIDEnrichedDetails_View(service *runner.Service) (details.KafmeshDeviceIDEnrichedDetails_View, error) {
	v, err := details.New_KafmeshDeviceIDEnrichedDetails_View(service.Options())
	if err != nil {
		return nil, err
	}

	err = service.RegisterRunner(v.Watch)
	if err != nil {
		return nil, errors.Wrap(err, "failed to register runner with service")
	}

	err = discover_Details_KafmeshDeviceIDEnrichedDetails_View(service)
	if err != nil {
		return nil, errors.Wrap(err, "failed to register with discovery")
	}

	return v, nil
}

func Register_EnrichedDetailWarehouseSink_Sink(service *runner.Service, sink details.EnrichedDetailWarehouseSink_Sink, interval time.Duration, maxBufferSize int) error {
	r, err := details.Register_EnrichedDetailWarehouseSink_Sink(service.Options(), sink, interval, maxBufferSize)
	if err != nil {
		return errors.Wrap(err, "failed to register sink")
	}

	err = service.RegisterRunner(r)
	if err != nil {
		return errors.Wrap(err, "failed to register runner with service")
	}

	err = discover_Details_KafmeshDeviceIDEnrichedDetails_Sink(service)
	if err != nil {
		return errors.Wrap(err, "failed to register with discovery")
	}

	return nil
}

func Register_EnrichedHeartbeatWarehouseSink_Sink(service *runner.Service, sink heartbeats.EnrichedHeartbeatWarehouseSink_Sink, interval time.Duration, maxBufferSize int) error {
	r, err := heartbeats.Register_EnrichedHeartbeatWarehouseSink_Sink(service.Options(), sink, interval, maxBufferSize)
	if err != nil {
		return errors.Wrap(err, "failed to register sink")
	}

	err = service.RegisterRunner(r)
	if err != nil {
		return errors.Wrap(err, "failed to register runner with service")
	}

	err = discover_Heartbeats_KafmeshDeviceIDEnrichedHeartbeat_Sink(service)
	if err != nil {
		return errors.Wrap(err, "failed to register with discovery")
	}

	return nil
}
