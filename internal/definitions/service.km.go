// Code generated by kafmesh-gen. DO NOT EDIT.

package definitions

import (
	"time"

	"github.com/pkg/errors"
	"github.com/syncromatics/kafmesh/pkg/runner"

	"kafmesh-example/internal/definitions/assignments"
	"kafmesh-example/internal/definitions/details"
	"kafmesh-example/internal/definitions/egress"
	"kafmesh-example/internal/definitions/heartbeats"
)

func Register_Details_Enricher_Processor(service *runner.Service, processor details.Enricher_Processor) error {
	r, err := details.Register_Enricher_Processor(service, processor)
	if err != nil {
		return errors.Wrap(err, "failed to register processor")
	}

	err = service.RegisterRunner(r)
	if err != nil {
		return errors.Wrap(err, "failed to register runner with service")
	}

	err = discover_Details_Enricher_Processor(service)
	if err != nil {
		return errors.Wrap(err, "failed to register with discovery")
	}

	return nil
}

func Register_Heartbeats_HeartbeatEnricher_Processor(service *runner.Service, processor heartbeats.HeartbeatEnricher_Processor) error {
	r, err := heartbeats.Register_HeartbeatEnricher_Processor(service, processor)
	if err != nil {
		return errors.Wrap(err, "failed to register processor")
	}

	err = service.RegisterRunner(r)
	if err != nil {
		return errors.Wrap(err, "failed to register runner with service")
	}

	err = discover_Heartbeats_HeartbeatEnricher_Processor(service)
	if err != nil {
		return errors.Wrap(err, "failed to register with discovery")
	}

	return nil
}

func New_Assignments_DeviceIDCustomer_Source(service *runner.Service) (assignments.DeviceIDCustomer_Source, error) {
	e, err := assignments.New_DeviceIDCustomer_Source(service)
	if err != nil {
		return nil, err
	}

	err = service.RegisterRunner(e.Watch)
	if err != nil {
		return nil, errors.Wrap(err, "failed to register runner with service")
	}

	err = discover_Assignments_DeviceIDCustomer_Source(service)
	if err != nil {
		return nil, errors.Wrap(err, "failed to register with discovery")
	}

	return e, nil
}

func New_Assignments_CustomerIDDetails_Source(service *runner.Service) (assignments.CustomerIDDetails_Source, error) {
	e, err := assignments.New_CustomerIDDetails_Source(service)
	if err != nil {
		return nil, err
	}

	err = service.RegisterRunner(e.Watch)
	if err != nil {
		return nil, errors.Wrap(err, "failed to register runner with service")
	}

	err = discover_Assignments_CustomerIDDetails_Source(service)
	if err != nil {
		return nil, errors.Wrap(err, "failed to register with discovery")
	}

	return e, nil
}

func New_Details_DeviceIDDetails_Source(service *runner.Service) (details.DeviceIDDetails_Source, error) {
	e, err := details.New_DeviceIDDetails_Source(service)
	if err != nil {
		return nil, err
	}

	err = service.RegisterRunner(e.Watch)
	if err != nil {
		return nil, errors.Wrap(err, "failed to register runner with service")
	}

	err = discover_Details_DeviceIDDetails_Source(service)
	if err != nil {
		return nil, errors.Wrap(err, "failed to register with discovery")
	}

	return e, nil
}

func New_Heartbeats_DeviceIDHeartbeat_Source(service *runner.Service) (heartbeats.DeviceIDHeartbeat_Source, error) {
	e, err := heartbeats.New_DeviceIDHeartbeat_Source(service)
	if err != nil {
		return nil, err
	}

	err = service.RegisterRunner(e.Watch)
	if err != nil {
		return nil, errors.Wrap(err, "failed to register runner with service")
	}

	err = discover_Heartbeats_DeviceIDHeartbeat_Source(service)
	if err != nil {
		return nil, errors.Wrap(err, "failed to register with discovery")
	}

	return e, nil
}

func New_Assignments_DeviceIDCustomer_View(service *runner.Service) (assignments.DeviceIDCustomer_View, error) {
	v, err := assignments.New_DeviceIDCustomer_View(service.Options())
	if err != nil {
		return nil, err
	}

	err = service.RegisterRunner(v.Watch)
	if err != nil {
		return nil, errors.Wrap(err, "failed to register runner with service")
	}

	err = discover_Assignments_DeviceIDCustomer_View(service)
	if err != nil {
		return nil, errors.Wrap(err, "failed to register with discovery")
	}

	return v, nil
}

func New_Assignments_CustomerIDDetails_View(service *runner.Service) (assignments.CustomerIDDetails_View, error) {
	v, err := assignments.New_CustomerIDDetails_View(service.Options())
	if err != nil {
		return nil, err
	}

	err = service.RegisterRunner(v.Watch)
	if err != nil {
		return nil, errors.Wrap(err, "failed to register runner with service")
	}

	err = discover_Assignments_CustomerIDDetails_View(service)
	if err != nil {
		return nil, errors.Wrap(err, "failed to register with discovery")
	}

	return v, nil
}

func New_Details_DeviceIDEnrichedDetails_View(service *runner.Service) (details.DeviceIDEnrichedDetails_View, error) {
	v, err := details.New_DeviceIDEnrichedDetails_View(service.Options())
	if err != nil {
		return nil, err
	}

	err = service.RegisterRunner(v.Watch)
	if err != nil {
		return nil, errors.Wrap(err, "failed to register runner with service")
	}

	err = discover_Details_DeviceIDEnrichedDetails_View(service)
	if err != nil {
		return nil, errors.Wrap(err, "failed to register with discovery")
	}

	return v, nil
}

func Register_EnrichedDetailWarehouseSink_Sink(service *runner.Service, sink details.EnrichedDetailWarehouseSink_Sink, interval time.Duration, maxBufferSize int) error {
	r, err := details.Register_EnrichedDetailWarehouseSink_Sink(service.Options(), sink, interval, maxBufferSize)
	if err != nil {
		return errors.Wrap(err, "failed to register sink")
	}

	err = service.RegisterRunner(r)
	if err != nil {
		return errors.Wrap(err, "failed to register runner with service")
	}

	err = discover_Details_DeviceIDEnrichedDetails_Sink(service)
	if err != nil {
		return errors.Wrap(err, "failed to register with discovery")
	}

	return nil
}

func Register_EnrichedHeartbeatWarehouseSink_Sink(service *runner.Service, sink heartbeats.EnrichedHeartbeatWarehouseSink_Sink, interval time.Duration, maxBufferSize int) error {
	r, err := heartbeats.Register_EnrichedHeartbeatWarehouseSink_Sink(service.Options(), sink, interval, maxBufferSize)
	if err != nil {
		return errors.Wrap(err, "failed to register sink")
	}

	err = service.RegisterRunner(r)
	if err != nil {
		return errors.Wrap(err, "failed to register runner with service")
	}

	err = discover_Heartbeats_DeviceIDEnrichedHeartbeat_Sink(service)
	if err != nil {
		return errors.Wrap(err, "failed to register with discovery")
	}

	return nil
}

func Register_Egress_Egress_ViewSource(service *runner.Service, viewSource egress.Egress_ViewSource, updateInterval time.Duration, syncTimeout time.Duration) error {
	r, err := egress.Register_Egress_ViewSource(service.Options(), viewSource, updateInterval, syncTimeout)
	if err != nil {
		return errors.Wrap(err, "failed to register viewSource")
	}

	err = service.RegisterRunner(r)
	if err != nil {
		return errors.Wrap(err, "failed to register runner with service")
	}

	err = discover_Egress_Egress_ViewSource(service)
	if err != nil {
		return errors.Wrap(err, "failed to register with discovery")
	}

	return nil
}
