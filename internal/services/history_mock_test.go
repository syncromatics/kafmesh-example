// Code generated by MockGen. DO NOT EDIT.
// Source: ./history.go

// Package services_test is a generated GoMock package.
package services_test

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	warehouse "kafmesh-example/internal/warehouse"
	reflect "reflect"
)

// MockDetailsRepository is a mock of DetailsRepository interface
type MockDetailsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDetailsRepositoryMockRecorder
}

// MockDetailsRepositoryMockRecorder is the mock recorder for MockDetailsRepository
type MockDetailsRepositoryMockRecorder struct {
	mock *MockDetailsRepository
}

// NewMockDetailsRepository creates a new mock instance
func NewMockDetailsRepository(ctrl *gomock.Controller) *MockDetailsRepository {
	mock := &MockDetailsRepository{ctrl: ctrl}
	mock.recorder = &MockDetailsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDetailsRepository) EXPECT() *MockDetailsRepositoryMockRecorder {
	return m.recorder
}

// LastDetails mocks base method
func (m *MockDetailsRepository) LastDetails(arg0 context.Context, arg1 int64) (*warehouse.Details, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastDetails", arg0, arg1)
	ret0, _ := ret[0].(*warehouse.Details)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastDetails indicates an expected call of LastDetails
func (mr *MockDetailsRepositoryMockRecorder) LastDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastDetails", reflect.TypeOf((*MockDetailsRepository)(nil).LastDetails), arg0, arg1)
}

// MockHeartbeatsRepository is a mock of HeartbeatsRepository interface
type MockHeartbeatsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockHeartbeatsRepositoryMockRecorder
}

// MockHeartbeatsRepositoryMockRecorder is the mock recorder for MockHeartbeatsRepository
type MockHeartbeatsRepositoryMockRecorder struct {
	mock *MockHeartbeatsRepository
}

// NewMockHeartbeatsRepository creates a new mock instance
func NewMockHeartbeatsRepository(ctrl *gomock.Controller) *MockHeartbeatsRepository {
	mock := &MockHeartbeatsRepository{ctrl: ctrl}
	mock.recorder = &MockHeartbeatsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHeartbeatsRepository) EXPECT() *MockHeartbeatsRepositoryMockRecorder {
	return m.recorder
}

// LastHeartbeat mocks base method
func (m *MockHeartbeatsRepository) LastHeartbeat(arg0 context.Context, arg1 int64) (*warehouse.Heartbeat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastHeartbeat", arg0, arg1)
	ret0, _ := ret[0].(*warehouse.Heartbeat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastHeartbeat indicates an expected call of LastHeartbeat
func (mr *MockHeartbeatsRepositoryMockRecorder) LastHeartbeat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastHeartbeat", reflect.TypeOf((*MockHeartbeatsRepository)(nil).LastHeartbeat), arg0, arg1)
}
